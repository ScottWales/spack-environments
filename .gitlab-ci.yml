# 1. Build base image with Docker
# 2. Build spack packages and save to binary cache
# 3. Build CI packages with dependencies for that package only
# 4. Build full container with all of Jopa
# 5. Convert Jopa docker container to Apptainer

stages:
    - setup
    - base
    - generate
    - package-build
    - container-build
    - clean

variables:
    DOCKER_REGISTRY: '172.17.0.2:5000'
    DOCKER_PERSIST: '/scratch/gitlab-runner/'
    DOCKER_TAG: '${CI_COMMIT_BRANCH}'
    CI_OUTDIR: '${DOCKER_PERSIST}/${CI_PROJECT_PATH}/${CI_COMMIT_SHA}'
    BRANCH_CACHE: '${DOCKER_PERSIST}/${CI_PROJECT_PATH}/${CI_COMMIT_BRANCH}'
    SPACK_CACHE: '${DOCKER_PERSIST}/${CI_PROJECT_PATH}/spack'
    APPTAINER_CACHEDIR: '${DOCKER_PERSIST}/${CI_PROJECT_PATH}/apptainer'
    MAMBA_REPO: 'file://${DOCKER_PERSIST}/bom/ngm/conda-pkgs/pkgs'

setup:
    stage: setup
    tags: [docker]
    script:
        - mkdir -p "$SPACK_CACHE"
        - mkdir -p "$BRANCH_CACHE"
        - chmod a+rwX "$SPACK_CACHE"
        - mkdir -p "$APPTAINER_CACHEDIR"
        - mkdir -p "$CI_OUTDIR"

# Base docker image, used for building the Spack packages
docker build spack-base:
    stage: base
    tags: [docker]
    image: &kaniko_image
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    script: &kaniko_build
        - mkdir -p /kaniko/.docker
        - |
            cat > /kaniko/.docker/config.json <<EOF
            {"auths": {
                "$CI_DEPENDENCY_PROXY_SERVER": {
                    "auth": "$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')"
                }
            }}
            EOF
        - /kaniko/executor
            --context "${CI_PROJECT_DIR}"
            --dockerfile "${CI_PROJECT_DIR}/containers/base.docker"
            --destination "${DOCKER_REGISTRY}/spack-base:${DOCKER_TAG}"
            --build-arg "SPACK_CACHE=${SPACK_CACHE}"
            --build-arg "MAMBA_REPO=${MAMBA_REPO}"
            --use-new-run
            --snapshotMode=redo
            --compressed-caching=false
            --cache=false
    rules:
        - changes:
            - containers/base.docker
            - containers/base/*

# Generate lock files for Spack packages
generate spack environments:
    stage: generate
    tags: [docker]
    image:
        name: localhost:5000/spack-base:${DOCKER_TAG}
        entrypoint: [""]
        pull_policy: always
    script:
        - /build/entrypoint.sh ./ci/generate-spack.sh
    artifacts:
      paths:
        - "$CI_PROJECT_DIR/artifacts"
      expire_in: 1 day

# Generate lock files for Spack packages
generate mamba environments:
    stage: generate
    tags: [docker]
    image:
        name: localhost:5000/spack-base:${DOCKER_TAG}
        entrypoint: [""]
        pull_policy: always
    script:
        - /build/entrypoint.sh ./ci/generate-mamba.sh
    artifacts:
      paths:
        - "$CI_PROJECT_DIR/artifacts"
      expire_in: 1 day

      # # Build Spack packages
      # spack build:
      #     stage: package-build
      #     trigger:
      #       include:
      #         - artifact: artifacts/pipeline.yml
      #           job: generate spack environments
      #       strategy: depend

# Generate build tasks for containers
generate containers:
    stage: generate
    tags: [docker]
    image: 
        name: localhost:5000/spack-base:${DOCKER_TAG}
        entrypoint: [""]
        pull_policy: always
    script:
        - /build/entrypoint.sh ./ci/generate-containers.sh
    needs:
        # Get the lock files for the environments
        - job: generate spack environments
          artifacts: true
        - job: generate mamba environments
          artifacts: true
    artifacts:
      paths:
        - "$CI_PROJECT_DIR/artifacts"
      expire_in: 1 day

      # # Build containers
      # container build:
      #     stage: container-build
      #     trigger:
      #       include:
      #         - artifact: artifacts/containers.yml
      #           job: generate containers
      #       strategy: depend

clean:
    stage: clean
    tags: [docker]
    script:
      - rm -rv $CI_OUTDIR
    when: always
