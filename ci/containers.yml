stages:
    - docker
    - apptainer
    - stage
    - clean

# Build Docker containers
docker build containers:
    stage: docker
    image:
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    before_script:
        - export DEST=${CONCRETE_ENV}:latest
    script:
        - mkdir -p /kaniko/.docker
        - |
            cat > /kaniko/.docker/config.json <<EOF
            {"auths": {
                "$CI_DEPENDENCY_PROXY_SERVER": {
                    "auth": "$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')"
                }
            }}
            EOF
        - /kaniko/executor
            --context "${CI_PROJECT_DIR}"
            --dockerfile "${CI_PROJECT_DIR}/containers/spack-env.docker"
            --destination "${DEST}"
            --tar-path "${CI_OUTDIR}/${CONCRETE_ENV}.tar"
            --build-arg "DOCKER_REGISTRY=${DOCKER_REGISTRY}"
            --build-arg "BASE_ENV=${BASE_ENV}"
            --build-arg "CONCRETE_ENV=${CONCRETE_ENV}"
            --use-new-run
            --single-snapshot
            --snapshotMode=redo
            --compressed-caching=false
            --no-push
    needs:
        - job: generate spack environments
          pipeline: "__PIPELINE_ID__"
        - job: generate containers
          pipeline: "__PIPELINE_ID__"
    parallel: &build_matrix
        matrix: __MATRIX__

# Build Apptainer containers
apptainer build containers:
    stage: apptainer
    tags: [docker]
    image:
        name: quay.io/singularity/singularity:v3.10.2
        entrypoint: [""]
    before_script:
        - export DEST=${CONCRETE_ENV}:latest
    script:
        - singularity build --no-https "${CI_OUTDIR}/${DEST}.sif" "docker-archive://${CI_OUTDIR}/${CONCRETE_ENV}.tar"
    parallel: *build_matrix

# Copy container to Gadi
stage gadi:
    stage: stage
    tags: [gadi]
    before_script:
        - export DEST=${CONCRETE_ENV}:latest
    script:
        - scp "gitlab-runner:${CI_OUTDIR}/${DEST}.sif" image.sif
        - etc/install-gadi-image.sh
    after_script:
        - rm image.sif
    parallel: *build_matrix

# Cache lock files
cache build:
    stage: clean
    tags: [docker]
    script:
        - mkdir -p $BRANCH_CACHE/ci-$CONCRETE_ENV
        - cp -r artifacts/ci-$CONCRETE_ENV/* $BRANCH_CACHE/ci-$CONCRETE_ENV
    needs:
        - job: generate spack environments
          pipeline: "__PIPELINE_ID__"
        - job: generate containers
          pipeline: "__PIPELINE_ID__"
        - job: apptainer build containers
    parallel: *build_matrix

